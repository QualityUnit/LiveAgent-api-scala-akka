/**
 * LiveAgent API
 * This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@qualityunit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liveagent.legacy.client.api

import com.liveagent.legacy.client.core.ApiEnum
import com.liveagent.legacy.client.model._
import org.json4s._
import scala.reflect.ClassTag

object EnumsSerializers {

  def all: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new EnumNameSerializer[AgentEnums.Role](AgentEnums.Role.fromString) :+
    new EnumNameSerializer[AgentEnums.Gender](AgentEnums.Gender.fromString) :+
    new EnumNameSerializer[ApiKeyEnums.`Type`](ApiKeyEnums.`Type`.fromString) :+
    new EnumNameSerializer[ApiKeyLoginEnums.`Type`](ApiKeyLoginEnums.`Type`.fromString) :+
    new EnumNameSerializer[ApiKeyWithPrivilegesEnums.`Type`](ApiKeyWithPrivilegesEnums.`Type`.fromString) :+
    new EnumNameSerializer[BillingStatusEnums.Status](BillingStatusEnums.Status.fromString) :+
    new EnumNameSerializer[CallEnums.Direction](CallEnums.Direction.fromString) :+
    new EnumNameSerializer[CallEnums.CalleeStatus](CallEnums.CalleeStatus.fromString) :+
    new EnumNameSerializer[CallListItemEnums.`Type`](CallListItemEnums.`Type`.fromString) :+
    new EnumNameSerializer[CallMessageEnums.`Type`](CallMessageEnums.`Type`.fromString) :+
    new EnumNameSerializer[CallStatusEnums.Status](CallStatusEnums.Status.fromString) :+
    new EnumNameSerializer[CallTransferResultEnums.CalleeStatus](CallTransferResultEnums.CalleeStatus.fromString) :+
    new EnumNameSerializer[CompanyEnums.`Type`](CompanyEnums.`Type`.fromString) :+
    new EnumNameSerializer[CompanyListItemEnums.`Type`](CompanyListItemEnums.`Type`.fromString) :+
    new EnumNameSerializer[ContactEnums.`Type`](ContactEnums.`Type`.fromString) :+
    new EnumNameSerializer[ContactListItemEnums.`Type`](ContactListItemEnums.`Type`.fromString) :+
    new EnumNameSerializer[CustomButtonEnums.Method](CustomButtonEnums.Method.fromString) :+
    new EnumNameSerializer[CustomButtonEnums.`Type`](CustomButtonEnums.`Type`.fromString) :+
    new EnumNameSerializer[CustomButtonEnums.Status](CustomButtonEnums.Status.fromString) :+
    new EnumNameSerializer[DiscountValueEnums.`Type`](DiscountValueEnums.`Type`.fromString) :+
    new EnumNameSerializer[DiscountValueEnums.ValueType](DiscountValueEnums.ValueType.fromString) :+
    new EnumNameSerializer[ExtensionEnums.Status](ExtensionEnums.Status.fromString) :+
    new EnumNameSerializer[FilterEnums.Rtype](FilterEnums.Rtype.fromString) :+
    new EnumNameSerializer[HostingInfoEnums.System](HostingInfoEnums.System.fromString) :+
    new EnumNameSerializer[InvoiceEnums.Currency](InvoiceEnums.Currency.fromString) :+
    new EnumNameSerializer[IvrChoiceEnums.Dtmf](IvrChoiceEnums.Dtmf.fromString) :+
    new EnumNameSerializer[IvrStepEnums.`Type`](IvrStepEnums.`Type`.fromString) :+
    new EnumNameSerializer[MessageEnums.`Type`](MessageEnums.`Type`.fromString) :+
    new EnumNameSerializer[MessageEnums.Format](MessageEnums.Format.fromString) :+
    new EnumNameSerializer[MessageGroupEnums.`Type`](MessageGroupEnums.`Type`.fromString) :+
    new EnumNameSerializer[MessageGroupEnums.Status](MessageGroupEnums.Status.fromString) :+
    new EnumNameSerializer[PaymentMethodEnums.PaymentType](PaymentMethodEnums.PaymentType.fromString) :+
    new EnumNameSerializer[PaymentProcessorTypeEnums.ProcessorType](PaymentProcessorTypeEnums.ProcessorType.fromString) :+
    new EnumNameSerializer[PhoneDeviceEnums.`Type`](PhoneDeviceEnums.`Type`.fromString) :+
    new EnumNameSerializer[PhoneNumberEnums.`Type`](PhoneNumberEnums.`Type`.fromString) :+
    new EnumNameSerializer[PhoneNumberEnums.Status](PhoneNumberEnums.Status.fromString) :+
    new EnumNameSerializer[PredefinedAnswerEnums.Format](PredefinedAnswerEnums.Format.fromString) :+
    new EnumNameSerializer[RoleEnums.Role](RoleEnums.Role.fromString) :+
    new EnumNameSerializer[SettingEnums.Name](SettingEnums.Name.fromString) :+
    new EnumNameSerializer[SubscriptionEnums.Status](SubscriptionEnums.Status.fromString) :+
    new EnumNameSerializer[TicketEnums.Status](TicketEnums.Status.fromString) :+
    new EnumNameSerializer[TicketListItemEnums.Status](TicketListItemEnums.Status.fromString) :+
    new EnumNameSerializer[TicketListItemEnums.DoNotSendMail](TicketListItemEnums.DoNotSendMail.fromString) :+
    new EnumNameSerializer[TicketListItemEnums.UseTemplate](TicketListItemEnums.UseTemplate.fromString) :+
    new EnumNameSerializer[TicketListItemEnums.IsHtmlMessage](TicketListItemEnums.IsHtmlMessage.fromString) :+
    new EnumNameSerializer[TicketUpdatableEnums.Status](TicketUpdatableEnums.Status.fromString) :+
    new EnumNameSerializer[UpgradeEnums.BillingPeriod](UpgradeEnums.BillingPeriod.fromString) :+
    new EnumNameSerializer[UserEnums.Role](UserEnums.Role.fromString) :+
    new EnumNameSerializer[VariationUpgradesEnums.Currency](VariationUpgradesEnums.Currency.fromString)

  private class EnumNameSerializer[E <: ApiEnum: ClassTag](deserializeMethod: String => E)
    extends Serializer[E] {
    import JsonDSL._

    def deserialize(implicit format: Formats):  PartialFunction[(TypeInfo, JValue), E] = {
      case (TypeInfo(clazz, _), json) if clazz == implicitly[ClassTag[E]].runtimeClass =>
        json match {
          case JString(value) =>
            deserializeMethod(value)
          case value =>
            throw new MappingException(s"Can't convert $value to ${clazz.getName}")
        }
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: ApiEnum => i.value
    }
  }
}
