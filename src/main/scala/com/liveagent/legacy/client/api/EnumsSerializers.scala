/**
 * LiveAgent API
 * This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@qualityunit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liveagent.legacy.client.api

import com.liveagent.legacy.client.model._
import org.json4s._
import scala.reflect.ClassTag

object EnumsSerializers {

  def all: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new EnumNameSerializer(AgentEnums.Role) :+
    new EnumNameSerializer(AgentEnums.Gender) :+
    new EnumNameSerializer(ApiKeyEnums.`Type`) :+
    new EnumNameSerializer(ApiKeyLoginEnums.`Type`) :+
    new EnumNameSerializer(ApiKeyWithPrivilegesEnums.`Type`) :+
    new EnumNameSerializer(BillingStatusEnums.Status) :+
    new EnumNameSerializer(CallEnums.Direction) :+
    new EnumNameSerializer(CallEnums.CalleeStatus) :+
    new EnumNameSerializer(CallListItemEnums.`Type`) :+
    new EnumNameSerializer(CallMessageEnums.`Type`) :+
    new EnumNameSerializer(CallStatusEnums.Status) :+
    new EnumNameSerializer(CallTransferResultEnums.CalleeStatus) :+
    new EnumNameSerializer(CompanyEnums.`Type`) :+
    new EnumNameSerializer(CompanyListItemEnums.`Type`) :+
    new EnumNameSerializer(ContactEnums.`Type`) :+
    new EnumNameSerializer(ContactListItemEnums.`Type`) :+
    new EnumNameSerializer(CustomButtonEnums.Method) :+
    new EnumNameSerializer(CustomButtonEnums.`Type`) :+
    new EnumNameSerializer(CustomButtonEnums.Status) :+
    new EnumNameSerializer(DiscountValueEnums.`Type`) :+
    new EnumNameSerializer(DiscountValueEnums.ValueType) :+
    new EnumNameSerializer(ExtensionEnums.Status) :+
    new EnumNameSerializer(FilterEnums.Rtype) :+
    new EnumNameSerializer(HostingInfoEnums.System) :+
    new EnumNameSerializer(InvoiceEnums.Currency) :+
    new EnumNameSerializer(IvrChoiceEnums.Dtmf) :+
    new EnumNameSerializer(IvrStepEnums.`Type`) :+
    new EnumNameSerializer(MessageEnums.`Type`) :+
    new EnumNameSerializer(MessageEnums.Format) :+
    new EnumNameSerializer(MessageGroupEnums.`Type`) :+
    new EnumNameSerializer(MessageGroupEnums.Status) :+
    new EnumNameSerializer(PaymentMethodEnums.PaymentType) :+
    new EnumNameSerializer(PaymentProcessorTypeEnums.ProcessorType) :+
    new EnumNameSerializer(PhoneDeviceEnums.`Type`) :+
    new EnumNameSerializer(PhoneNumberEnums.`Type`) :+
    new EnumNameSerializer(PhoneNumberEnums.Status) :+
    new EnumNameSerializer(PredefinedAnswerEnums.Format) :+
    new EnumNameSerializer(RoleEnums.Role) :+
    new EnumNameSerializer(SettingEnums.Name) :+
    new EnumNameSerializer(SubscriptionEnums.Status) :+
    new EnumNameSerializer(TicketEnums.Status) :+
    new EnumNameSerializer(TicketListItemEnums.Status) :+
    new EnumNameSerializer(TicketListItemEnums.DoNotSendMail) :+
    new EnumNameSerializer(TicketListItemEnums.UseTemplate) :+
    new EnumNameSerializer(TicketListItemEnums.IsHtmlMessage) :+
    new EnumNameSerializer(TicketUpdatableEnums.Status) :+
    new EnumNameSerializer(UpgradeEnums.BillingPeriod) :+
    new EnumNameSerializer(UserEnums.Role) :+
    new EnumNameSerializer(VariationUpgradesEnums.Currency)

  private class EnumNameSerializer[E <: Enumeration: ClassTag](enum: E)
    extends Serializer[E#Value] {
    import JsonDSL._

    val EnumerationClass: Class[E#Value] = classOf[E#Value]

    def deserialize(implicit format: Formats):
    PartialFunction[(TypeInfo, JValue), E#Value] = {
      case (t @ TypeInfo(EnumerationClass, _), json) if isValid(json) =>
        json match {
          case JString(value) =>
            enum.withName(value)
          case value =>
            throw new MappingException(s"Can't convert $value to $EnumerationClass")
        }
    }

    private[this] def isValid(json: JValue) = json match {
      case JString(value) if enum.values.exists(_.toString == value) => true
      case _ => false
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: E#Value => i.toString
    }
  }

}
