/**
 * LiveAgent API
 * This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@qualityunit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liveagent.legacy.client.api

import com.liveagent.legacy.client.model.ApiInfo
import com.liveagent.legacy.client.model.ApiKey
import com.liveagent.legacy.client.model.ApiKeyLogin
import com.liveagent.legacy.client.model.ApiKeyWithPrivileges
import com.liveagent.legacy.client.model.ApiPrivilege
import com.liveagent.legacy.client.model.Count
import com.liveagent.legacy.client.model.ErrorResponse
import com.liveagent.legacy.client.core._
import com.liveagent.legacy.client.core.CollectionFormats._
import com.liveagent.legacy.client.core.ApiKeyLocations._

object ApiApi {

  def apply(baseUrl: String = "https://localhost/api/v3") = new ApiApi(baseUrl)
}

class ApiApi(baseUrl: String) {
  
  /**
   * Create api key
   * 
   * Expected answers:
   *   code 200 : ApiKeyWithPrivileges (Api keys response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param apiKey 
   */
  def createApiKeys(apiKey: Option[ApiKeyWithPrivileges] = None)(implicit apiKeyValue: ApiKeyValue): ApiRequest[ApiKeyWithPrivileges] =
    ApiRequest[ApiKeyWithPrivileges](ApiMethods.POST, baseUrl, "/apikeys", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withBody(apiKey)
      .withSuccessResponse[ApiKeyWithPrivileges](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Delete an api key
   * 
   * Expected answers:
   *   code 200 : Any (OK response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param apikeyId 
   */
  def deleteApiKey(apikeyId: Double)(implicit apiKeyValue: ApiKeyValue): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.DELETE, baseUrl, "/apikeys/{apikeyId}", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withPathParam("apikeyId", apikeyId)
      .withSuccessResponse[Any](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Get new api key
   * 
   * Expected answers:
   *   code 200 : ApiKey (Api keys response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   */
  def generateApiKey()(implicit apiKeyValue: ApiKeyValue): ApiRequest[ApiKey] =
    ApiRequest[ApiKey](ApiMethods.POST, baseUrl, "/apikeys/_generate", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withSuccessResponse[ApiKey](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Get information about api
   * 
   * Expected answers:
   *   code 200 : ApiInfo (Api info response)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param apiVersion v1 - legacy api version,  v3 - current api version
   */
  def getApiInfo(apiVersion: String)(implicit apiKeyValue: ApiKeyValue): ApiRequest[ApiInfo] =
    ApiRequest[ApiInfo](ApiMethods.GET, baseUrl, "/api/info/{apiVersion}", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withPathParam("apiVersion", apiVersion)
      .withSuccessResponse[ApiInfo](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Get information about api keys
   * 
   * Expected answers:
   *   code 200 : ApiKeyWithPrivileges (Api keys response)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param apikeyId 
   */
  def getApiKey(apikeyId: Double)(implicit apiKeyValue: ApiKeyValue): ApiRequest[ApiKeyWithPrivileges] =
    ApiRequest[ApiKeyWithPrivileges](ApiMethods.GET, baseUrl, "/apikeys/{apikeyId}", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withPathParam("apikeyId", apikeyId)
      .withSuccessResponse[ApiKeyWithPrivileges](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Get information about api keys
   * 
   * Expected answers:
   *   code 200 : Seq[ApiKey] (Api keys response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param perPage Results per page. Used only if _page is used.
   * @param sortDir Sorting direction ASC or DESC
   * @param filters Filters (json object {column:value, ...} or json array [[column,operator,value], ...])
   * @param cursor used for iteration throght resultset. Cursor identifies specific page in resultset.
   * @param sortField 
   */
  def getApiKeys(perPage: Option[Int] = None, sortDir: Option[String] = None, filters: Option[String] = None, cursor: Option[String] = None, sortField: Option[String] = None)(implicit apiKeyValue: ApiKeyValue): ApiRequest[Seq[ApiKey]] =
    ApiRequest[Seq[ApiKey]](ApiMethods.GET, baseUrl, "/apikeys", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withQueryParam("_perPage", perPage)
      .withQueryParam("_sortDir", sortDir)
      .withQueryParam("_filters", filters)
      .withQueryParam("_cursor", cursor)
      .withQueryParam("_sortField", sortField)
      .withSuccessResponse[Seq[ApiKey]](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Get api privileges
   * 
   * Expected answers:
   *   code 200 : Seq[ApiPrivilege] (Api keys response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   */
  def getApiPrivileges()(implicit apiKeyValue: ApiKeyValue): ApiRequest[Seq[ApiPrivilege]] =
    ApiRequest[Seq[ApiPrivilege]](ApiMethods.GET, baseUrl, "/api/privileges", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withSuccessResponse[Seq[ApiPrivilege]](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Count (Api v3 keys count response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param filters Filters (json object {column:value, ...} or json array [[column,operator,value], ...])
   */
  def getApiV3KeysCount(filters: Option[String] = None)(implicit apiKeyValue: ApiKeyValue): ApiRequest[Count] =
    ApiRequest[Count](ApiMethods.GET, baseUrl, "/api/v3/count", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withQueryParam("_filters", filters)
      .withSuccessResponse[Count](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Creates or returns API key from login and password.
   * 
   * Expected answers:
   *   code 201 : ApiKeyWithPrivileges (Api key response)
   *   code 400 : ErrorResponse (Invalid value)
   *   code 401 : ErrorResponse (Blocked IP address)
   *   code 403 : ErrorResponse (Invalid credentials)
   *   code 424 : ErrorResponse (Two-factor authentication is required)
   *   code 425 : ErrorResponse (Two-factor authentication error)
   *   code 429 : ErrorResponse (Too many requests - login rate limit exceeded)
   *   code 0 : ErrorResponse (Error response)
   * 
   * @param apiKeyLogin 
   */
  def login(apiKeyLogin: Option[ApiKeyLogin] = None): ApiRequest[ApiKeyWithPrivileges] =
    ApiRequest[ApiKeyWithPrivileges](ApiMethods.POST, baseUrl, "/apikeys/_login", "application/json")
      .withBody(apiKeyLogin)
      .withSuccessResponse[ApiKeyWithPrivileges](201)
      .withErrorResponse[ErrorResponse](400)
      .withErrorResponse[ErrorResponse](401)
      .withErrorResponse[ErrorResponse](403)
      .withErrorResponse[ErrorResponse](424)
      .withErrorResponse[ErrorResponse](425)
      .withErrorResponse[ErrorResponse](429)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Update an api key
   * 
   * Expected answers:
   *   code 200 : ApiKeyWithPrivileges (Api key that was updated)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param apikeyId 
   * @param apiKey 
   */
  def updateApiKey(apikeyId: Double, apiKey: Option[ApiKeyWithPrivileges] = None)(implicit apiKeyValue: ApiKeyValue): ApiRequest[ApiKeyWithPrivileges] =
    ApiRequest[ApiKeyWithPrivileges](ApiMethods.PUT, baseUrl, "/apikeys/{apikeyId}", "application/json")
      .withApiKey(apiKeyValue, "apikey", HEADER)
      .withBody(apiKey)
      .withPathParam("apikeyId", apikeyId)
      .withSuccessResponse[ApiKeyWithPrivileges](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      



}

