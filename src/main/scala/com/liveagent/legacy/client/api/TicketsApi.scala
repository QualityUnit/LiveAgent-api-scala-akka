/**
 * LiveAgent API
 * This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@qualityunit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liveagent.legacy.client.api

import com.liveagent.legacy.client.model.Count
import com.liveagent.legacy.client.model.ErrorResponse
import com.liveagent.legacy.client.model.MessageGroup
import com.liveagent.legacy.client.model.Ticket
import com.liveagent.legacy.client.model.TicketAttribute
import com.liveagent.legacy.client.model.TicketHistory
import com.liveagent.legacy.client.model.TicketInformation
import com.liveagent.legacy.client.model.TicketListItem
import com.liveagent.legacy.client.model.TicketSla
import com.liveagent.legacy.client.model.TicketUpdatable
import com.liveagent.legacy.client.core._
import com.liveagent.legacy.client.core.CollectionFormats._
import com.liveagent.legacy.client.core.ApiKeyLocations._

object TicketsApi {

  def apply(baseUrl: String = "https://localhost/api/v3") = new TicketsApi(baseUrl)
}

class TicketsApi(baseUrl: String) {
  
  /**
   * Create new ticket
   * 
   * Expected answers:
   *   code 200 : TicketInformation (Ticket that was created)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticket 
   */
  def createTicket(ticket: Option[TicketListItem] = None)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[TicketInformation] =
    ApiRequest[TicketInformation](ApiMethods.POST, baseUrl, "/tickets", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withBody(ticket)
      .withSuccessResponse[TicketInformation](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Any (OK response)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   */
  def deleteTicket(ticketId: String)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.DELETE, baseUrl, "/tickets/{ticketId}", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withPathParam("ticketId", ticketId)
      .withSuccessResponse[Any](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Ticket (Ticket response)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   */
  def getTicket(ticketId: String)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Ticket] =
    ApiRequest[Ticket](ApiMethods.GET, baseUrl, "/tickets/{ticketId}", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withPathParam("ticketId", ticketId)
      .withSuccessResponse[Ticket](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : TicketAttribute (Ticket attribute)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   * @param attributeName 
   */
  def getTicketAttribute(ticketId: String, attributeName: String)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[TicketAttribute] =
    ApiRequest[TicketAttribute](ApiMethods.GET, baseUrl, "/tickets/{ticketId}/attributes/{attributeName}", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withPathParam("ticketId", ticketId)
      .withPathParam("attributeName", attributeName)
      .withSuccessResponse[TicketAttribute](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Seq[TicketHistory] (Ticket response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param perPage Results per page. Used only if _page is used.
   * @param sortDir Sorting direction ASC or DESC
   * @param filters Filters (json object {column:value, ...} or json array [[column,operator,value], ...])
   * @param cursor used for iteration throght resultset. Cursor identifies specific page in resultset.
   * @param sortField 
   * @param timezoneOffset difference between client and server time in seconds
   */
  def getTicketHistory(perPage: Option[Int] = None, sortDir: Option[String] = None, filters: Option[String] = None, cursor: Option[String] = None, sortField: Option[String] = None, timezoneOffset: Option[Int] = None)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Seq[TicketHistory]] =
    ApiRequest[Seq[TicketHistory]](ApiMethods.GET, baseUrl, "/tickets/history", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withQueryParam("_perPage", perPage)
      .withQueryParam("_sortDir", sortDir)
      .withQueryParam("_filters", filters)
      .withQueryParam("_cursor", cursor)
      .withQueryParam("_sortField", sortField)
      .withHeaderParam("Timezone-Offset", timezoneOffset)
      .withSuccessResponse[Seq[TicketHistory]](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Count (Tickets history count response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param filters Filters (json object {column:value, ...} or json array [[column,operator,value], ...])
   */
  def getTicketHistoryCount(filters: Option[String] = None)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Count] =
    ApiRequest[Count](ApiMethods.GET, baseUrl, "/tickets/history/count", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withQueryParam("_filters", filters)
      .withSuccessResponse[Count](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Seq[TicketHistory] (Ticket history)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   */
  def getTicketHistory_0(ticketId: String)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Seq[TicketHistory]] =
    ApiRequest[Seq[TicketHistory]](ApiMethods.GET, baseUrl, "/tickets/{ticketId}/history", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withPathParam("ticketId", ticketId)
      .withSuccessResponse[Seq[TicketHistory]](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Seq[MessageGroup] (Ticket message groups)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   * @param includeQuotedMessages If set, response will include quoted messages context, otherwise - only metadata.
   * @param page Page to display. Not used if _from is defined.
   * @param perPage Results per page. Used only if _page is used.
   * @param sortDir Sorting direction ASC or DESC
   * @param sortField Sorting field
   * @param filters Filters (json object {column:value, ...} or json array [[column,operator,value], ...])
   * @param from Result set start. Takes precedence over _page.
   * @param to Result set end. Used only if _from is used.
   */
  def getTicketMessageGroups(ticketId: String, includeQuotedMessages: Option[Boolean] = None, page: Option[Int] = None, perPage: Option[Int] = None, sortDir: Option[String] = None, sortField: Option[String] = None, filters: Option[String] = None, from: Option[Int] = None, to: Option[Int] = None)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Seq[MessageGroup]] =
    ApiRequest[Seq[MessageGroup]](ApiMethods.GET, baseUrl, "/tickets/{ticketId}/messages", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withQueryParam("includeQuotedMessages", includeQuotedMessages)
      .withQueryParam("_page", page)
      .withQueryParam("_perPage", perPage)
      .withQueryParam("_sortDir", sortDir)
      .withQueryParam("_sortField", sortField)
      .withQueryParam("_filters", filters)
      .withQueryParam("_from", from)
      .withQueryParam("_to", to)
      .withPathParam("ticketId", ticketId)
      .withSuccessResponse[Seq[MessageGroup]](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : TicketSla (Ticket SLA response)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   */
  def getTicketSla(ticketId: String)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[TicketSla] =
    ApiRequest[TicketSla](ApiMethods.GET, baseUrl, "/tickets/{ticketId}/sla", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withPathParam("ticketId", ticketId)
      .withSuccessResponse[TicketSla](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Seq[Ticket] (Tickets response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param page Page to display. Not used if _from is defined.
   * @param perPage Results per page. Used only if _page is used.
   * @param from Result set start. Takes precedence over _page.
   * @param to Result set end. Used only if _from is used.
   * @param sortDir Sorting direction ASC or DESC
   * @param sortField Sorting field
   * @param filters Filters (json object {column:value, ...} or json array [[column,operator,value], ...])
   */
  def getTicketsList(page: Option[Int] = None, perPage: Option[Int] = None, from: Option[Int] = None, to: Option[Int] = None, sortDir: Option[String] = None, sortField: Option[String] = None, filters: Option[String] = None)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Seq[Ticket]] =
    ApiRequest[Seq[Ticket]](ApiMethods.GET, baseUrl, "/tickets", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withQueryParam("_page", page)
      .withQueryParam("_perPage", perPage)
      .withQueryParam("_from", from)
      .withQueryParam("_to", to)
      .withQueryParam("_sortDir", sortDir)
      .withQueryParam("_sortField", sortField)
      .withQueryParam("_filters", filters)
      .withSuccessResponse[Seq[Ticket]](200)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Any (OK response)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   * @param attributeName 
   * @param value New attribute value
   */
  def setTicketAttribute(ticketId: String, attributeName: String, value: String)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, baseUrl, "/tickets/{ticketId}/attributes/{attributeName}", "application/x-www-form-urlencoded")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withFormParam("value", value)
      .withPathParam("ticketId", ticketId)
      .withPathParam("attributeName", attributeName)
      .withSuccessResponse[Any](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Any (OK response)
   *   code 403 : ErrorResponse (Error response)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   * @param dateTime - date and time with valid format: YYYY-MM-DD HH:MM:SS
   * @param userid 
   */
  def setTicketPostpone(ticketId: String, dateTime: String, userid: Option[String] = None)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, baseUrl, "/tickets/{ticketId}/postpone", "application/x-www-form-urlencoded")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withFormParam("date_time", dateTime)
      .withFormParam("userid", userid)
      .withPathParam("ticketId", ticketId)
      .withSuccessResponse[Any](200)
      .withErrorResponse[ErrorResponse](403)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      

  /**
   * Expected answers:
   *   code 200 : Ticket (Ticket response)
   *   code 404 : ErrorResponse (Error response)
   *   code 0 : ErrorResponse (Error response)
   * 
   * Available security schemes:
   *   apikey (apiKey)
   * 
   * @param ticketId 
   * @param ticket 
   */
  def updateTicket(ticketId: String, ticket: Option[TicketUpdatable] = None)(implicit apiKeyValueFromRequest: ApiKeyValueFromRequest): ApiRequest[Ticket] =
    ApiRequest[Ticket](ApiMethods.PUT, baseUrl, "/tickets/{ticketId}", "application/json")
      .withApiKey(apiKeyValueFromRequest, "apikey", HEADER)
      .withBody(ticket)
      .withPathParam("ticketId", ticketId)
      .withSuccessResponse[Ticket](200)
      .withErrorResponse[ErrorResponse](404)
      .withDefaultErrorResponse[ErrorResponse]
      



}

