/**
 * LiveAgent API
 * This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@qualityunit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liveagent.legacy.client.model

import com.liveagent.legacy.client.core.{ApiEnum, ApiModel}

import org.json4s.MappingException

case class ApiKeyWithPrivileges (
  id: Option[Double] = None,
  key: Option[String] = None,
  valid_to_date: Option[String] = None,
  role: Option[String] = None,
  name: Option[String] = None,
  /* - A - API - C - Chat - P - Phone - T - Ticket - W - Web (Agent Panel) */
  `type`: Option[ApiKeyWithPrivilegesEnums.`Type`] = None,
  installid: Option[String] = None,
  userid: Option[String] = None,
  whitelist: Option[String] = None,
  privileges: Option[Seq[ApiPrivilege]] = None
) extends ApiModel

object ApiKeyWithPrivilegesEnums {
    sealed trait `Type` extends ApiEnum

    object `Type` {
        case object `A` extends `Type` { val value = "A" }
        case object `C` extends `Type` { val value = "C" }
        case object `P` extends `Type` { val value = "P" }
        case object `T` extends `Type` { val value = "T" }
        case object `W` extends `Type` { val value = "W" }

        def fromString(value: String): `Type` = value match {
          case "A" =>
            `Type`.`A`
          case "C" =>
            `Type`.`C`
          case "P" =>
            `Type`.`P`
          case "T" =>
            `Type`.`T`
          case "W" =>
            `Type`.`W`
          case unknown =>
            throw new MappingException(s"Can't convert $unknown to `Type`")
        }
    }

}

