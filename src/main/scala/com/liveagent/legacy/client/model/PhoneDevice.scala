/**
 * LiveAgent API
 * This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@qualityunit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liveagent.legacy.client.model

import com.liveagent.legacy.client.core.{ApiEnum, ApiModel}

import org.json4s.MappingException

case class PhoneDevice (
  id: String,
  /* A - LiveAgent phone app, S - SIP phone, E - PSTN phone, W - In panel web phone, I - Api phone */
  `type`: PhoneDeviceEnums.`Type`,
  number: Option[String] = None,
  name: Option[String] = None,
  reg_status: Option[String] = None,
  connection_host: Option[String] = None,
  connection_user: Option[String] = None,
  connection_pass: Option[String] = None,
  last_modified: Option[String] = None,
  user_agent: Option[String] = None,
  agent_id: Option[String] = None,
  /* Additional params column with no specific meaning */
  params: Option[String] = None
) extends ApiModel

object PhoneDeviceEnums {
    sealed trait `Type` extends ApiEnum

    object `Type` {
        case object `A` extends `Type` { val value = "A" }
        case object `S` extends `Type` { val value = "S" }
        case object `E` extends `Type` { val value = "E" }
        case object `W` extends `Type` { val value = "W" }
        case object `I` extends `Type` { val value = "I" }

        def fromString(value: String): `Type` = value match {
          case "A" =>
            `Type`.`A`
          case "S" =>
            `Type`.`S`
          case "E" =>
            `Type`.`E`
          case "W" =>
            `Type`.`W`
          case "I" =>
            `Type`.`I`
          case unknown =>
            throw new MappingException(s"Can't convert $unknown to `Type`")
        }
    }

}

